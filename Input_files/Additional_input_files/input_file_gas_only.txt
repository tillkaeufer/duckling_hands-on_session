# -----------------------------
# setting
# -----------------------------
bayesian_folder='./Output/' #folder in which the output of this program should be saved
dust_path='./Q-curves/fitting-Qcurves/Q_GRF/'    #path to the dust data

subfold='gas_only/' #subfolder where the retrieval run is saved


slab_folder='./LineData/' # folder where the slab grids are saved
slab_prefix='15_' #prefix of the slab grid that is used
run_number=1 #Giving your run a unique ID


fit_gas_only=True


# -----------------------------
# -----------------------------
# Parameters
# -----------------------------
# -----------------------------

#True does not work yet
sample_all=False #do you want to sample the dust scaling factors in a the bayesian way, otherwise the faster linear scaling is used

use_bb_star=False #Using a black body as the star? otherwise put the file path to your stellar spectrum in 'stellar_file'
stellar_file ='./Stellar_files/star_data.txt' # path to the stellar spectrum

rin_powerlaw=False #using a temperature power law as the inner rim? otherwise it's a black body

dust_species_list=[]


# -----------------------------
#fixed parameters
# -----------------------------


fixed_paras=True
fixed_dict={'distance':140,
            } 

# -----------------------------
# Priors
# -----------------------------


prior_dict={'q_emis':[-1.0,-0.1]}


log_coldens=True
slab_prior_dict={                
           'CO2':{'ColDens':[15.00,18.00], #CO2 will be retrieved with a constant column density
                    'temis':[200,800], # and a constant temperature
                    'logradius':[-2,0]
                    },
                                   
           'HCN':{'ColDens':[15.00,18.00], #HCN will be retrieved with a constant column density
                    'temis':[200,800], # and a constant temperature
                    'logradius':[-2,0]
                    },
                                   
           'C2H2':{'ColDens':[15.00,18.00], #C2H2 will be retrieved with a constant column density
                    'temis':[200,800], # and a constant temperature
                    'logradius':[-2,0]
                    },
                                   
           'H2O':{'ColDens':[15.00,18.00], #CO2 will be retrieved with a constant column density
                    'tmax':[200,800], # and a temperature power law 
                    'tmin':[200,800], 
                    'logradius':[-2,0]
                    }
}

# These priors are only relevant if sample_all=True            
prior_on_log=True #deciding if the prior should be on log or linear scale
                  # if on log scale the numbers should be between -inf and 0
                  # if on linear scale the numbers should be between 0 and 1
prior_scaling_dust=[-5,0]
scale_prior={'sc_ir':[-5,0],
             'sc_mid':[-5,0]}
             
             
             
# -----------------------------
#code to load observations
# -----------------------------

import numpy as np
lam_obs=np.load('./Observations/Additional_examples/gas_only_wave.npy')
flux_obs=np.load('./Observations/Additional_examples/gas_only_flux.npy')
sig_obs=np.ones_like(flux_obs)*0.0001


# -----------------------------
# Retrieval settings
# -----------------------------

use_ultranest=False

#for ultranest
slice_sampler=False
length_ultra=2 #only relevant if slice_sampler=True
adaptive_nsteps=False #only relevant if slice_sampler=True e.g. 'move-distance' or False


#for multinest
fast_retrival=True #accuracy setting of multinest 

#alternatively you get set the specific settings
n_live_points = 400 # for multinest and ultranest
evidence_tolerance = 5 # for multinest and ultranest
#sampling_efficiency = 0.3 # for multinest
frac_remain= 0.5 # for ultranest
dlogz=2.0 # for ultranest
dKL=2.0 # for ultranest
